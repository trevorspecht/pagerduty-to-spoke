'use strict';

const got = require('got');
const sm = require('./get-secrets');
// const spoke = require('./send-spoke-ticket');

module.exports.sendAlertMessage = async (event, errMsg) => {

  const itChannel = '#alerts_it';
  const teamChannel = event.detail.Team.slack;
  const botName = 'oncall-spoke alerts';
  const botIcon = ':atspoke:';
  const spokeTeam = event.detail.Team.spoke;

  const teamBody = {
    json: {
      channel: teamChannel,
      username: botName,
      icon_emoji: botIcon,
      text: `<https://mapbox.askspoke.com/teams/${(spokeTeam).toLowerCase()}|${spokeTeam} team Spoke settings> were not changed automatically with on-call handoff.\nYou can change ticket assignment settings manually using the link above.\nIT has been notified of this error.\n${errMsg}`,
      attachments: [
        {
          fallback: `${spokeTeam} team Spoke settings were not changed automatically.`,
          color: '#ff4500',
          footer: 'A friendly notice from Mapbox IT'
        }
      ]
    },
    responseType: 'json'
  };

  const itBody = {
    json: {
      channel: itChannel,
      username: botName,
      icon_emoji: botIcon,
      text: `<https://mapbox.askspoke.com/teams/${(spokeTeam).toLowerCase()}|${spokeTeam} team Spoke settings> were not changed automatically with on-call handoff.\nThe ${spokeTeam} team has been notified in the ${teamChannel} channel.\n${errMsg}`,
      attachments: [
        {
          fallback: `${spokeTeam} team Spoke settings were not changed automatically.`,
          color: '#ff4500',
          footer: 'Generated by mapbox/oncall-spoke'
        }
      ]
    },
    responseType: 'json'
  };

  // get Slack webhook URL for #alerts_it channel
  const slackUrl = await sm.getSecret(process.env.SlackWebhookUrl);
  const options = {
    url: slackUrl,
    headers: {
      'Content-Type': 'application/json'
    }
  };

  try {
    const itResponse = await got.post(options, itBody);
    console.log('Slack message sent: ' + itResponse);
  } catch (error) {
    const errorMessage = `error sending Slack message: ${error}`;
    console.log(errorMessage);
    // await spoke.postAlertTicket(errorMessage);
  }

  try {
    const teamResponse = await got.post(options, teamBody);
    console.log('Slack message sent: ' + teamResponse);
  } catch (error) {
    const errorMessage = `error sending Slack message: ${error}`;
    console.log(errorMessage);
    // await spoke.postAlertTicket(errorMessage);
  }
};
